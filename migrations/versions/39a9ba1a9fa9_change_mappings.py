"""Change mappings

Revision ID: 39a9ba1a9fa9
Revises: 71a865d9bfe9
Create Date: 2023-11-01 23:31:22.372830

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '39a9ba1a9fa9'
down_revision: Union[str, None] = '71a865d9bfe9'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_token_access_token', table_name='token')
    op.drop_table('token')
    op.alter_column('organisation', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('organisation', 'created_on',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('organisation', 'updated_on',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('organisation_review', 'highlights',
               existing_type=postgresql.ARRAY(sa.VARCHAR()),
               nullable=False)
    op.alter_column('organisation_review', 'organisation_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('organisation_review', 'created_on',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('organisation_review', 'updated_on',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('social_account', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('social_account', 'created_on',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('social_account', 'updated_on',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('social_group', 'organisation_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('social_group', 'created_on',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('social_group', 'updated_on',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.drop_index('ix_user_username', table_name='user')
    op.drop_constraint('user_email_key', 'user', type_='unique')
    op.drop_constraint('user_username_key', 'user', type_='unique')
    op.drop_index('ix_user_email', table_name='user')
    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=True)
    op.drop_column('user', 'created_on')
    op.drop_column('user', 'updated_on')
    op.drop_column('user', 'role')
    op.drop_column('user', 'username')
    op.drop_column('user', 'full_nm')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('user', sa.Column('full_nm', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('user', sa.Column('username', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('user', sa.Column('role', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('user', sa.Column('updated_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('user', sa.Column('created_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_user_email'), table_name='user')
    op.create_index('ix_user_email', 'user', ['email'], unique=False)
    op.create_unique_constraint('user_username_key', 'user', ['username'])
    op.create_unique_constraint('user_email_key', 'user', ['email'])
    op.create_index('ix_user_username', 'user', ['username'], unique=False)
    op.alter_column('social_group', 'updated_on',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('social_group', 'created_on',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('social_group', 'organisation_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('social_account', 'updated_on',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('social_account', 'created_on',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('social_account', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('organisation_review', 'updated_on',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('organisation_review', 'created_on',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('organisation_review', 'organisation_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('organisation_review', 'highlights',
               existing_type=postgresql.ARRAY(sa.VARCHAR()),
               nullable=True)
    op.alter_column('organisation', 'updated_on',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('organisation', 'created_on',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('organisation', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.create_table('token',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('access_token', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('expires_in', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='token_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='token_pk'),
    sa.UniqueConstraint('access_token', name='token_access_token_key')
    )
    op.create_index('ix_token_access_token', 'token', ['access_token'], unique=False)
    # ### end Alembic commands ###
